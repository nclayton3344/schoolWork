	.arch armv6
        .arm
	.fpu vfp
	.text
	.align	2
	.global doReverse
        .syntax unified
	.type	doReverse, %function

.equiv  EOLN, 10        @ ASCII end of line
.equiv  ERROR, 0        @ ASCII ERROR

        @ Calling sequence (no arguments):
        @                               bl  doReverse
        @
        @ uses two system functions:  fgetc and fputc
        @ fgetc(address of stream) ==> returns next character in stream
        @                              0 for end of file/stream
        @                             -1 for error
        @                              EOLN for end of line
        @ fputc(a character, address of output stream)
        @
        @ NOTE:  variable ch in C version is an automatic variable 
        @        whose value is stored on the stack(memory)


doReverse:
	@stmfd	sp!, {r4, r5, fp, lr}
        push    {r4, r5, fp, lr}
	add	fp, sp, #4      @ set frame pointer using Raspberry Pi conventions
	sub	sp, sp, #8      @ set up for local/automatic variable
                                @ actually reserves four (4) bytes for storage
        ldr     r4, input
        ldr     r4, [r4]        @ address of stream stdin
        ldr     r5, output
        ldr     r5, [r5]        @ address of stream stdout

	mov	r0, r4          @ address of stdin
	bl	fgetc           @ 
	str	r0, [fp, #-8]   @ ch = fgetc(ch, stdin)
	cmp	r0, #EOLN
	beq	exitDoReverse
        cmp     r0, #ERROR
        beq     exitDoReverse
        bl      doReverse
	ldr	r0, [fp, #-8]   @ fetch ch from local storage
	mov	r1, r5          @ address of stdout
	bl	fputc           @ output ch to stdout

exitDoReverse:
        @ prepare for return
        sub     sp, fp, #4      @ restore sp
        @ldmfd  sp!, {r4, r5, fp, pc}
        pop     {r4, r5, fp, pc} @ restore r4, r5, fp, and set pc with lr
        .align  2
input:  .word   stdin            @ stdin defined in the C library
output: .word   stdout           @ stdout define in the C library
        .size   doReverse, .-doReverse
